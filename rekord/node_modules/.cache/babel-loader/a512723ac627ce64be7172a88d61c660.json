{"ast":null,"code":"import axios from 'axios';\nexport var FETCHING = 'FETCHING';\nexport var FETCHED = 'FETCHED';\nexport var SAVING = 'SAVING';\nexport var SAVED = 'SAVED';\nexport var UPDATING = 'UPDATING';\nexport var UPDATED = 'UPDATED';\nexport var DELETING = 'DELETING';\nexport var DELETED = 'DELETED';\nexport var ERROR = 'ERROR';\nexport var FETCHING_NOTE = 'FETCHING_NOTE';\nexport var FETCHED_NOTE = 'FETCHED_NOTE';\nexport var FETCHING_USERS = 'FETCHING_USERS';\nexport var FETCHED_USERS = 'FETCHED_USERS';\nexport var SAVING_USER = 'SAVING_USER';\nexport var SAVED_USER = 'SAVED_USER';\nexport var fetchNotes = function fetchNotes() {\n  return function (dispatch) {\n    dispatch({\n      type: FETCHING\n    });\n    axios.get('https://backend-project-lee.herokuapp.com/notes').then(function (response) {\n      dispatch({\n        type: FETCHED,\n        payload: response.data\n      });\n    }).catch(function (error) {\n      dispatch({\n        type: ERROR,\n        payload: error\n      });\n    });\n  };\n};\nexport var addNote = function addNote(note, history) {\n  return function (dispatch) {\n    dispatch({\n      type: SAVING\n    });\n    axios.post('https://backend-project-lee.herokuapp.com/notes/addnote', {\n      title: note.title,\n      textBody: note.content\n    }).then(function (response) {\n      dispatch({\n        type: SAVED,\n        payload: response.data\n      });\n    }).then(function (response) {\n      return history.push('/');\n    }).catch(function (error) {\n      dispatch({\n        type: ERROR,\n        payload: error\n      });\n    });\n  };\n};\nexport var fetchNote = function fetchNote(id) {\n  return function (dispatch) {\n    dispatch({\n      type: FETCHING_NOTE\n    });\n    axios.get(\"https://backend-project-lee.herokuapp.com/notes/\".concat(id)).then(function (response) {\n      dispatch({\n        type: FETCHED_NOTE,\n        payload: response.data\n      });\n    }).catch(function (error) {\n      dispatch({\n        type: ERROR,\n        payload: error\n      });\n    });\n  };\n}; // to do delete and update\n\nexport var deleteNote = function deleteNote(NoteId, history) {\n  return function (dispatch) {\n    dispatch({\n      type: DELETING\n    });\n    axios.delete(\"https://backend-project-lee.herokuapp.com/notes/delete/\".concat(NoteId)).then(function (response) {\n      dispatch({\n        type: DELETED,\n        payload: response.data\n      });\n    }).then(function (response) {\n      return history.push('/');\n    }).catch(function (error) {\n      dispatch({\n        type: ERROR,\n        payload: error\n      });\n    });\n  };\n};\nexport var updateNote = function updateNote(note) {\n  return function (dispatch) {\n    dispatch({\n      type: UPDATING\n    });\n    axios.put(\"https://backend-project-lee.herokuapp.com/notes/edit/\".concat(note.id), {\n      title: note.title,\n      textBody: note.content\n    }).then(function (response) {\n      dispatch({\n        type: UPDATED,\n        payload: response.data\n      });\n    }).catch(function (error) {\n      dispatch({\n        type: ERROR,\n        payload: error\n      });\n    });\n  };\n};\nexport var getUsers = function getUsers() {\n  var smurfs = axios.get(\"https://backend-project-lee.herokuapp.com/users\");\n  return function (dispatch) {\n    dispatch({\n      type: FETCHING_USERS\n    });\n    smurfs.then(function (response) {\n      dispatch({\n        type: FETCHING_USERS,\n        payload: response.data\n      });\n    }).catch(function (err) {\n      dispatch({\n        type: ERROR,\n        payload: err\n      });\n    });\n  };\n};\nexport var addUser = function addUser(smurf) {\n  var newSmurf = axios.post(\"\".concat(URL), smurf);\n  console.log(newSmurf);\n  return function (dispatch) {\n    dispatch({\n      type: ADDING_SMURF\n    });\n    newSmurf.then(function (response) {\n      dispatch({\n        type: ADD_SMURF,\n        payload: response.data\n      });\n    }).catch(function (err) {\n      dispatch({\n        type: ERROR,\n        payload: err\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/Users/lee/Desktop/rekord/rekord/src/actions/index.js"],"names":["axios","FETCHING","FETCHED","SAVING","SAVED","UPDATING","UPDATED","DELETING","DELETED","ERROR","FETCHING_NOTE","FETCHED_NOTE","FETCHING_USERS","FETCHED_USERS","SAVING_USER","SAVED_USER","fetchNotes","dispatch","type","get","then","response","payload","data","catch","error","addNote","note","history","post","title","textBody","content","push","fetchNote","id","deleteNote","NoteId","delete","updateNote","put","getUsers","smurfs","err","addUser","smurf","newSmurf","URL","console","log","ADDING_SMURF","ADD_SMURF"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\n\nexport const FETCHING = 'FETCHING';\nexport const FETCHED = 'FETCHED';\nexport const SAVING = 'SAVING';\nexport const SAVED = 'SAVED';\nexport const UPDATING = 'UPDATING';\nexport const UPDATED = 'UPDATED';\nexport const DELETING = 'DELETING';\nexport const DELETED = 'DELETED';\nexport const ERROR = 'ERROR';\nexport const FETCHING_NOTE = 'FETCHING_NOTE';\nexport const FETCHED_NOTE = 'FETCHED_NOTE';\nexport const FETCHING_USERS = 'FETCHING_USERS'\nexport const FETCHED_USERS = 'FETCHED_USERS'\nexport const SAVING_USER = 'SAVING_USER'\nexport const SAVED_USER = 'SAVED_USER'\n\n\n\n\n\nexport const fetchNotes = () => {\n    return dispatch => {\n         dispatch({ type: FETCHING });\n         axios\n         .get('https://backend-project-lee.herokuapp.com/notes')\n         .then(response => {\n             dispatch({ type: FETCHED, payload: response.data });\n            })\n            .catch(error => {\n                dispatch({ type: ERROR, payload: error });\n            })\n        }\n    }\n\nexport const addNote = (note, history) => {\n    return dispatch => {\n        dispatch({ type: SAVING });\n        axios.post('https://backend-project-lee.herokuapp.com/notes/addnote', {\n            title: note.title,\n            textBody: note.content,\n        })\n        .then(response => {\n            dispatch({ type: SAVED, payload: response.data })\n        })\n        .then(response => history.push('/'))\n        .catch(error => {\n            dispatch({ type: ERROR, payload: error })\n        })\n }\n}\n\nexport const fetchNote = id => {\n    return dispatch => {\n        dispatch({ type: FETCHING_NOTE });\n         axios.get(`https://backend-project-lee.herokuapp.com/notes/${id}`)\n            .then(response => {\n                dispatch({ type: FETCHED_NOTE, payload: response.data });\n            })\n            .catch(error => {\n                dispatch({ type: ERROR, payload: error });\n            })\n    }\n}\n\n// to do delete and update\nexport const deleteNote =  (NoteId, history) => {\n    return dispatch => {\n        dispatch ({ type: DELETING });\n        axios\n        .delete(`https://backend-project-lee.herokuapp.com/notes/delete/${NoteId}`)\n        .then(response => {\n            dispatch({ type: DELETED, payload: response.data})\n        })\n        .then(response => history.push('/'))\n        .catch(error => {\n            dispatch({type: ERROR, payload: error })\n        })\n    }\n}\n\nexport const updateNote = note => {\n    return dispatch => {\n        dispatch({ type: UPDATING});\n        axios\n        .put(`https://backend-project-lee.herokuapp.com/notes/edit/${note.id}`, {\n            title: note.title,\n            textBody: note.content\n        })\n        .then(response => {\n            dispatch({ type: UPDATED, payload: response.data})\n        })\n        .catch(error => {\n            dispatch({type: ERROR, payload: error})\n        })\n    }\n}\n\nexport const getUsers = () => {\n    const smurfs = axios.get(`https://backend-project-lee.herokuapp.com/users`);\n    return dispatch => {\n      dispatch({type: FETCHING_USERS});\n      smurfs.then(response => {\n        dispatch({type: FETCHING_USERS, payload: response.data});\n      })\n      .catch(err => {\n        dispatch({type: ERROR, payload: err});\n      });\n    };\n  };\n\n export const addUser = smurf => {\n  const newSmurf = axios.post(`${URL}`,smurf);\n  console.log(newSmurf);\n  return dispatch => {\n    dispatch({type:ADDING_SMURF});\n    newSmurf\n    .then(response => {\n      dispatch({type: ADD_SMURF , payload: response.data});\n    })\n    .catch(err => {\n      dispatch({type: ERROR, payload: err});\n    });\n  };\n};"]},"metadata":{},"sourceType":"module"}